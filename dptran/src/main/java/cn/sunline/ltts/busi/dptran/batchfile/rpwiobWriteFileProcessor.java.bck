package cn.sunline.ltts.busi.dptran.batchfile;

import java.io.File;

import cn.sunline.ltts.base.util.LangUtil;
import cn.sunline.ltts.batch.engine.file.SimpleWriteFileBatchDataProcessor;
import cn.sunline.ltts.batch.engine.split.BatchDataWalker;
import cn.sunline.ltts.batch.engine.split.impl.CursorBatchDataWalker;
import cn.sunline.ltts.biz.global.SysUtil;
import cn.sunline.ltts.busi.aplt.tables.online.SysFileTables.Kapb_wjplxxbDao;
import cn.sunline.ltts.busi.aplt.tables.online.SysFileTables.Knp_bachDao;
import cn.sunline.ltts.busi.aplt.tables.online.SysFileTables.kapb_wjplxxb;
import cn.sunline.ltts.busi.aplt.tables.online.SysFileTables.knp_bach;
import cn.sunline.clwj.msap.core.tools.CommTools;
import cn.sunline.ltts.busi.aplt.tools.LogManager;
import cn.sunline.ltts.busi.dp.namedsql.DpSaveDrawDao;
import cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.rpwiob.Header;
import cn.sunline.ltts.busi.iobus.servicetype.ap.fbat.IoApFileBatch;
import cn.sunline.ltts.busi.iobus.servicetype.ca.IoCaOtherService;
import cn.sunline.ltts.busi.sys.type.ApBaseEnumType.E_BTFEST;
import cn.sunline.ltts.busi.sys.type.ApBaseEnumType.E_FILETP;
import cn.sunline.ltts.busi.sys.type.ApBaseEnumType.E_FLBTST;
import cn.sunline.ltts.busi.sys.type.ApBaseEnumType.E_SYSCCD;
import cn.sunline.ltts.core.api.logging.BizLog;
import cn.sunline.ltts.dao.Params;

	 /**
	  * 电子账户出入金信息写文件
	  *
	  */

public class  rpwiobWriteFileProcessor extends SimpleWriteFileBatchDataProcessor<cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input,cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property,cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.rpwiob.Header,cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.rpwiob.Body,cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.rpwiob.Foot,cn.sunline.ltts.busi.dp.tables.online.DpDepoBusiMain.knl_iobl>{
	
	private static final BizLog bizlog = LogManager.getBizLog(rpwiobWriteFileProcessor.class);
	private kapb_wjplxxb filetab = CommTools.getInstance(kapb_wjplxxb.class);
	
	/**
	 * 获取生成文件的文件名(含路径)
	 * @param input 批量交易的输入接口
	 * @param property批量交易的属性接口
	 * @return
	 */
	public String getFileName(cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property){
		bizlog.method(">>>>>>>>>>>>>>>>>>>>getFileName begin>>>>>>>>>>>>>>>>>>>");
		
		filetab.setUpfena(property.getUpfena() + ".RET");
		filetab.setUpfeph(property.getUpfeph());
		filetab.setBtchno(input.getFilesq());
		filetab.setFiletp(E_FILETP.DP021100);
		filetab.setBtfest(E_BTFEST.GIVING);
		Kapb_wjplxxbDao.insert(filetab);
		
		filetab = Kapb_wjplxxbDao.selectOne_odb1(input.getFilesq(), true);
		String pathname = filetab.getUpfeph() + File.separator + filetab.getUpfena();
		
		bizlog.parm("-------------pathname[%s]", pathname);
		bizlog.method(">>>>>>>>>>>>>>>>>>>getFileName end>>>>>>>>>>>>>>>>>>>>");
		
		return pathname;
	}

	/**
	 * 返回文件头信息
	 * @param input 批量交易的输入接口
	 * @param property批量交易的属性接口
	 * @return
	 */
	public cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.rpwiob.Header getHeader(cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property){
		Header header = CommTools.getInstance(Header.class);
		
		header.setTaskid(filetab.getBtchno());
		header.setChenggbs(filetab.getSuccnm());
		header.setChulizbs(filetab.getDistnm());
		header.setShibaibs(filetab.getFailnm());
		header.setZongbish(filetab.getTotanm());
		
		return header;
	}
	
	/**
	 * 基于游标的文件数据遍历器
	 * 返回文件体数据遍历器
	 * @param input 批量交易的输入接口
	 * @param property批量交易的属性接口
	 * @return 
	 * 注：写文件体支持并发查数据库和写文件，最后合并，所以如果需要有顺序的需自带排序功能
	 */
	public BatchDataWalker<cn.sunline.ltts.busi.dp.tables.online.DpDepoBusiMain.knl_iobl> getFileBodyDataWalker(cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property){
		Params para = new Params();
		para.add("chckdt", input.getTrandt());
		return new CursorBatchDataWalker<cn.sunline.ltts.busi.dp.tables.online.DpDepoBusiMain.knl_iobl>(DpSaveDrawDao.namedsql_SelAccIOFunInfo , para); 
	}

	/**
	 * 写文件体的每条记录前提供回调处理
	 * 
	 * @param index 序号，从1开始
	 * @param body 文件体对象
	 * @param input 批量交易的输入接口
	 * @param property批量交易的属性接口
	 * 
	 */
	public void bodyProcess(int index, cn.sunline.ltts.busi.dp.tables.online.DpDepoBusiMain.knl_iobl dateItem , cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.rpwiob.Body body, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property) {

	}
	
	
	/**
	 * 返回文件尾信息
	 * @param input 批量交易的输入接口
	 * @param property批量交易的属性接口
	 * @return
	 */
	public cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.rpwiob.Foot getFoot(cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property){
		//TODO
		return null;
	}
	
	/**
	 * 上传生成的批量文件
	 * @param input 批量交易的输入接口
	 * @param property 批量交易的属性接口
	 */
	public void uploadFile(cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property){
		//TODO
	}
	
	/**
	 * 写文件前处理回调
	 * @param taskId
	 * @param input
	 * @param property
	 */
	public void beforeWriteFileTranProcess(String taskId, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property) {
		filetab.setBtfest(E_BTFEST.RESTING);
		Kapb_wjplxxbDao.updateOne_odb1(filetab);
	}
	
	/**
	 * 写文件头异常处理回调
	 * @param taskId
	 * @param input
	 * @param property
	 * @param t
	 */
	public void writeHeaderExceptionProcess(String taskId, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property,
			Throwable t) {
		throw LangUtil.wrapThrow(t);
	}
	
	/**
	 * 写文件体(单笔)异常处理回调
	 * @param taskId
	 * @param input
	 * @param property
	 * @param dataItem
	 * @param t
	 */
	public void writeBodyExceptionProcess(String taskId, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property, cn.sunline.ltts.busi.dp.tables.online.DpDepoBusiMain.knl_iobl dateItem,
			Throwable t) {
		throw LangUtil.wrapThrow(t);
	}
	
	/**
	 * 写文件体异常处理回调
	 * @param taskId
	 * @param input
	 * @param property
	 * @param t
	 */
	public void writeBodyExceptionProcess(String taskId, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property,
			Throwable t) {
		throw LangUtil.wrapThrow(t);
	}
	
	/**
	 * 写文件尾异常处理回调
	 * @param taskId
	 * @param input
	 * @param property
	 * @param t
	 */
	public void writeFootExceptionProcess(String taskId, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property,
			Throwable t) {
		throw LangUtil.wrapThrow(t);
	}

	/**
	 * 写文件交易结束后回调
	 * @param taskId
	 * @param input
	 * @param property
	 */
	public void afterWriteFileTranProcess(String taskId, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property){
		filetab.setBtfest(E_BTFEST.RESTSUCC);
		Kapb_wjplxxbDao.updateOne_odb1(filetab);
		
		knp_bach plr = CommTools.getInstance(knp_bach.class);
		plr.setBusisq(CommTools.prcRunEnvs().getMntrsq());
		plr.setDataid(E_FILETP.DP021000);
		plr.setDatast(E_FLBTST.ZZCL);
		plr.setFilesq(input.getFilesq());
		plr.setSource(E_SYSCCD.NAS);
		plr.setTarget(E_SYSCCD.IPP);
		plr.setTrandt(input.getTrandt());
		Knp_bachDao.insert(plr);
		
		//通知数据子系统
//		CommTools.getInstance(IoApFileBatch.class).doBatchSubmitBack(input.getFilesq(), input.getTrandt(), filetab.getUpfena(), filetab.getUpfeph());
		bizlog.method(">>>>>>>>>>>>>>>>dubbo外调开始>>>>>>>>>>>>>>>>>>>>>>>");
		IoApFileBatch ioApFile =   SysUtil.getInstanceProxyByBind(IoApFileBatch.class,"rpwiob");
//		ioApFile.doBatchSubmitBack(input.getFilesq(), input.getTrandt(), filetab.getUpfena(), filetab.getUpfeph());
		bizlog.method(">>>>>>>>>>>>>>>>dubbo外调结束>>>>>>>>>>>>>>>>>>>>>>>");
	}
	
	/**
	 * 写文件交易异常处理回调
	 * @param taskId
	 * @param input
	 * @param property
	 * @param t
	 */
	public void writeFileTranExceptionProcess(String taskId, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Input input, cn.sunline.ltts.busi.dptran.batchfile.intf.Rpwiob.Property property,
			Throwable t) {
		throw LangUtil.wrapThrow(t);
	}

}

